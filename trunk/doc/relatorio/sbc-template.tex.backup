\documentclass[12pt]{article}

\usepackage{sbc-template}

\usepackage{graphicx,url}

%\usepackage[brazil]{babel}   
\usepackage[utf8]{inputenc}  

     
\sloppy

\title{Relatório Intermediario Pocket Mips\\ Laboratório de Hardware}

\author{Diogo Oliveira Roman\inst{1}, Rodrigo Gonsalvez de branco\inst{1}}


\address{Faculdade de Computação -- Universidade Federal do Mato Grosso do Sul
  (UFMS)\\
  %Caixa Postal 15.064 -- 91.501-970 -- Porto Alegre -- RS -- Brazil
%\nextinstitute
%  Department of Computer Science -- University of Durham\\
%  Durham, U.K.
%\nextinstitute
%  Departamento de Sistemas e Computa��o\\
%  Universidade Regional de Blumenal (FURB) -- Blumenau, SC -- Brazil
  \email{\{diogo.or,rodrigo.g.branco\}@gmail.com}
}

\begin{document} 

\maketitle


\section{Informações Gerais}

\textbf{Grupo:} Diogo Oliveira Roman, Rodrigo Gonsalvez de Branco.

Utilizamos o sistema Ghdl para fazer a compilação e o editor gedit no sistema operacional Linux. Além disso estamos usando svn para controle de versão.

\section{Modulo Implementados} \label{sec:modulos}

Todos os módulos já foram implementados. Abaixo descreveremos a implementação.

\subsection{Gerador de Clock}

A arquitetura foi implementada com dois processos, um processo é encarregado de gerar o clock com uma frequencia de 2 ns, este utiliza um sinal auxiliar da arquitetura identificado como \textit{clock}, dessa maneira o clock ainda não é propagado para fora do circuito. Um detalhe desse processo é que ele só fará a modificação no sinal \textit{clock}, caso o sinal \textit{canHalt} for igual a zero, dessa maneira é possível interromper a geração de clock, atribuindo '1' a \textit{canHalt}.

O outro processo é encarregado por modificar o sinal da arquitetura \textit{canHalt} e o sinal do circuito \textit{Clk}. Além disso sua lista de sensibilidade é composta pelos sinais \textit{clock} e \textit{Halt}, onde o primeiro é interno à arquitetura e outro pertence ao circuito. Caso as condições sejam satisfeitas o sinal de \textit{clock} é atribuito para \textit{Clk} e assim é propagado para fora do circuito, pois \textit{Clk} é o sinal de saída. Além disso caso o sinal do circuito \textit{Halt} sofrer um evento e mudar para '1' deve-se interromper a geração de clock, como mencionado anteriormente isso pode ser feito atribuindo o valor '1' à variável \textit{canHalt}.

\subsection{Registrador PC}

Esta arquitetura é composta por um único processo sincronizado pelo clock, sempre que o clock esta na borda de subida o valor do sinal \textit{NewPC} é atribuído ao \textit{CurrentPC}, mesmo quando o valor não muda esta atribuição deve acontecer, pois isso garante o funcionamento dessa entidade como um registrador.

\subsection{Somador de 1 Bit}

Esta arquitetura é totalmente estrutural, ou seja sem processo, ela simplesmente implementa o circuito somador de 1 bit. Como esse circuito é bem conhecido não entraremos nos detalhes de sua implementação neste trabalho, visto que a forma estrutural traduz exatamente o circuito para a linguagem VHDL, dessa maneira nenhum detalhe de implementação diferente do circuito foi necessário.

\subsection{Somador Completo}

Esta arquitetura é totalmente estrutural, e consiste simplesmente da ligação entre os somadores de 1 bit. A posições dos vetores de bits \textit{A}, \textit{B} e \textit{Sum} correspondem aos sinais \textit{A}, \textit{B} e \textit{Sum} em cada somador de 1 bit. Ja as posições do também vetor de bits \textit{carry} correspondem ao sinal \textit{carryIn} e \textit{carryOut} de cada somador de 1 bit.

A implementa desse somador foi feita seguindo o padrão ja conhecido na literatura, portando não entraremos em detalhes. A única observação a ser feita é que a ligação entre o \textit{carryOut} e o \textit{carryIn} de somadores de 1 bit respectivos é feita através do vetor de bits \textit{carry} dessa arquitetura. Cada posição desse vetor corresponde ao \textit{carryOut} dos somadores de 1 bit na respectiva posição, ou seja, o somador de 1 bit para os bits da posição 5 dos operandos armazenam o \textit{carryOut} também na posição 5 do vetor \textit{carry}, dessa maneira basta atribuir ao \textit{carryIn} a posição anterior no vetor \textit{carry} para fazer a ligação entre o \textit{carryIn} do somador atual com o \textit{carryOut} do somador anterior.

\subsection{Unidade Logico Aritimetica}

A implementação dessa arquitetura é simplesmente a instanciação de um somador completo e a manipulação dos seus operandos B e carryIn. Esta manipulação se deu da seguinte maneira:
\begin{enumerate}
 \item Caso seja soma: Atribui os operandos da ALU para o somador sem nenhuma alteração.
 \item Caso seja subtração: Nega bit a bit o operando \textit{B} e atribui um para o \textit{carryIn} da ALU.
\end{enumerate}

\subsection{Memória de Dados}

Implementamos a memória de dados utilizando um único processo, onde na primeira parte foi calculado o endereço a ser acessado na memória, isso nada mais é que a conversão do sinal \textit{Address} de binário para decimal. Isso foi necessário para acessar o índice do vetor bi-dimensional \textit{Memory}, que justamente é a representação da memória.

A leitura da memória é feita em qualquer momento, independente do clock, já a escrita é feita apenas na borda de subida.

\section{References}

\bibliographystyle{sbc}
\bibliography{sbc-template}

\end{document}
